export interface AIAnalysis {
  priority: 'high' | 'medium' | 'low'
  category: string
  estimatedTime: string
  riskLevel: string
  suggestions: string[]
  autoFixes: string[]
}

export interface RepairRequest {
  id: string
  title: string
  description: string
  location: string
  priority: 'high' | 'medium' | 'low'
  status: 'pending' | 'in-progress' | 'completed' | 'cancelled'
  category: string
  requester: string
  phone: string
  createdAt: Date
  updatedAt: Date
}

// AI Analysis Functions
export const analyzeRepairRequest = async (request: RepairRequest): Promise<string> => {
  // Simulate AI processing delay
  await new Promise(resolve => setTimeout(resolve, 1500))
  
  const priorityScore = request.priority === 'high' ? 3 : request.priority === 'medium' ? 2 : 1
  const urgencyKeywords = ['‡πÄ‡∏™‡∏µ‡∏¢', '‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡∏£‡∏±‡πà‡∏ß', '‡πÑ‡∏ü‡∏î‡∏±‡∏ö', '‡∏£‡πâ‡∏≠‡∏ô', '‡πÄ‡∏¢‡πá‡∏ô']
  const hasUrgencyKeywords = urgencyKeywords.some(keyword => 
    request.title.toLowerCase().includes(keyword) || 
    request.description.toLowerCase().includes(keyword)
  )
  
  let analysis = `ü§ñ **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI**\n\n`
  
  // Priority Analysis
  analysis += `**‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô**: ${getPriorityEmoji(request.priority)} ${getPriorityText(request.priority)}\n\n`
  
  // Category Analysis
  analysis += `**‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤**: ${request.category}\n\n`
  
  // Risk Assessment
  const riskLevel = priorityScore === 3 || hasUrgencyKeywords ? '‡∏™‡∏π‡∏á' : priorityScore === 2 ? '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' : '‡∏ï‡πà‡∏≥'
  analysis += `**‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á**: ${riskLevel} - ${getRiskDescription(riskLevel)}\n\n`
  
  // Recommendations
  analysis += `**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**:\n${getRecommendations(request.priority, request.category)}\n\n`
  
  // Estimated Time
  analysis += `**‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**: ${getEstimatedTime(request.priority)}\n\n`
  
  // Auto-fix Suggestions
  const autoFixes = getAutoFixSuggestions(request)
  if (autoFixes.length > 0) {
    analysis += `**‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥**:\n${autoFixes.join('\n')}\n\n`
  }
  
  return analysis
}

// Error Detection
export const detectErrors = (request: RepairRequest): string[] => {
  const errors: string[] = []
  
  if (!request.title.trim()) errors.push('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠')
  if (!request.description.trim()) errors.push('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î')
  if (!request.location.trim()) errors.push('‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà')
  if (!request.requester.trim()) errors.push('‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á')
  if (!request.phone.trim()) errors.push('‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£')
  
  // Business logic errors
  if (request.priority === 'high' && request.status === 'pending') {
    errors.push('‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£')
  }
  
  if (request.description.length < 10) {
    errors.push('‚ö†Ô∏è ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ')
  }
  
  return errors
}

// Auto Fix Suggestions
export const getAutoFixSuggestions = (request: RepairRequest): string[] => {
  const suggestions: string[] = []
  
  if (!request.title.trim()) {
    suggestions.push('üîß ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô')
  }
  
  if (request.priority === 'high' && request.status === 'pending') {
    suggestions.push('üîß ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"')
  }
  
  if (request.description.length < 10) {
    suggestions.push('üîß ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')
  }
  
  if (!request.phone.match(/^\d{3}-\d{3}-\d{4}$/)) {
    suggestions.push('üîß ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (081-234-5678)')
  }
  
  return suggestions
}

// Priority and Category Inference
export const inferPriority = (title: string, description: string): 'high' | 'medium' | 'low' => {
  const highPriorityKeywords = ['‡πÄ‡∏™‡∏µ‡∏¢', '‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡πÑ‡∏ü‡∏î‡∏±‡∏ö', '‡∏ô‡πâ‡∏≥‡∏£‡∏±‡πà‡∏ß', '‡∏£‡πâ‡∏≠‡∏ô', '‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô', '‡∏î‡πà‡∏ß‡∏ô']
  const mediumPriorityKeywords = ['‡∏ä‡πâ‡∏≤', '‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å', '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á', '‡∏ö‡∏≥‡∏£‡∏∏‡∏á']
  
  const text = (title + ' ' + description).toLowerCase()
  
  if (highPriorityKeywords.some(keyword => text.includes(keyword))) {
    return 'high'
  } else if (mediumPriorityKeywords.some(keyword => text.includes(keyword))) {
    return 'medium'
  }
  
  return 'low'
}

export const inferCategory = (title: string, description: string): string => {
  const text = (title + ' ' + description).toLowerCase()
  
  if (text.includes('‡πÑ‡∏ü‡∏ü‡πâ‡∏≤') || text.includes('‡πÑ‡∏ü') || text.includes('‡∏´‡∏•‡∏≠‡∏î')) {
    return '‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤'
  } else if (text.includes('‡πÅ‡∏≠‡∏£‡πå') || text.includes('‡πÄ‡∏¢‡πá‡∏ô') || text.includes('‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®')) {
    return '‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®'
  } else if (text.includes('‡∏ô‡πâ‡∏≥') || text.includes('‡∏ó‡πà‡∏≠') || text.includes('‡∏£‡∏±‡πà‡∏ß')) {
    return '‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡πâ‡∏≥'
  } else if (text.includes('‡∏õ‡∏£‡∏∞‡∏ï‡∏π') || text.includes('‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á') || text.includes('‡πÑ‡∏°‡πâ')) {
    return '‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πâ'
  } else if (text.includes('‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á') || text.includes('‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå') || text.includes('‡∏û‡∏¥‡∏°‡∏û‡πå')) {
    return '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'
  }
  
  return '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
}

// Helper Functions
const getPriorityEmoji = (priority: string): string => {
  switch (priority) {
    case 'high': return 'üî¥'
    case 'medium': return 'üü°'
    case 'low': return 'üü¢'
    default: return '‚ö™'
  }
}

const getPriorityText = (priority: string): string => {
  switch (priority) {
    case 'high': return '‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å'
    case 'medium': return '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'
    case 'low': return '‡∏ï‡πà‡∏≥'
    default: return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  }
}

const getRiskDescription = (riskLevel: string): string => {
  switch (riskLevel) {
    case '‡∏™‡∏π‡∏á': return '‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å'
    case '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á': return '‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô'
    case '‡∏ï‡πà‡∏≥': return '‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å'
    default: return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  }
}

const getRecommendations = (priority: string, category: string): string => {
  let recommendations = ''
  
  switch (priority) {
    case 'high':
      recommendations += '‚Ä¢ ‡∏Ñ‡∏ß‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n'
      recommendations += '‚Ä¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡∏°‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ\n'
      recommendations += '‚Ä¢ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á\n'
      break
    case 'medium':
      recommendations += '‚Ä¢ ‡∏Ñ‡∏ß‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 3-5 ‡∏ß‡∏±‡∏ô\n'
      recommendations += '‚Ä¢ ‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç\n'
      recommendations += '‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì\n'
      break
    case 'low':
      recommendations += '‚Ä¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥\n'
      recommendations += '‚Ä¢ ‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥\n'
      recommendations += '‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏á‡∏≤‡∏ô\n'
      break
  }
  
  // Category-specific recommendations
  if (category.includes('‡πÑ‡∏ü‡∏ü‡πâ‡∏≤')) {
    recommendations += '‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£\n'
  } else if (category.includes('‡∏ô‡πâ‡∏≥')) {
    recommendations += '‚Ä¢ ‡∏õ‡∏¥‡∏î‡∏ß‡∏≤‡∏•‡πå‡∏ß‡∏ô‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°\n'
  }
  
  return recommendations
}

const getEstimatedTime = (priority: string): string => {
  switch (priority) {
    case 'high': return '2-4 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á'
    case 'medium': return '1-2 ‡∏ß‡∏±‡∏ô'
    case 'low': return '3-5 ‡∏ß‡∏±‡∏ô'
    default: return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  }
}

// Statistics and Analytics
export const calculateStats = (requests: RepairRequest[]) => {
  const total = requests.length
  const pending = requests.filter(r => r.status === 'pending').length
  const inProgress = requests.filter(r => r.status === 'in-progress').length
  const completed = requests.filter(r => r.status === 'completed').length
  const critical = requests.filter(r => r.priority === 'high' && r.status !== 'completed').length
  
  const avgResponseTime = calculateAverageResponseTime(requests)
  
  return {
    totalRequests: total,
    pendingRequests: pending,
    inProgressRequests: inProgress,
    completedRequests: completed,
    criticalIssues: critical,
    averageResponseTime: avgResponseTime
  }
}

const calculateAverageResponseTime = (requests: RepairRequest[]): number => {
  const completedRequests = requests.filter(r => r.status === 'completed')
  if (completedRequests.length === 0) return 0
  
  const totalTime = completedRequests.reduce((sum, request) => {
    const responseTime = request.updatedAt.getTime() - request.createdAt.getTime()
    return sum + responseTime
  }, 0)
  
  return Math.round(totalTime / completedRequests.length / (1000 * 60 * 60)) // hours
} 